<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tretar&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-02T01:19:50.834Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tretar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 PaintCode 绘制自定义的省份地图控件</title>
    <link href="http://yoursite.com/2019/10/27/%E4%BD%BF%E7%94%A8-PaintCode-%E7%BB%98%E5%88%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%9C%81%E4%BB%BD%E5%9C%B0%E5%9B%BE%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/</id>
    <published>2019-10-27T15:08:20.000Z</published>
    <updated>2020-03-02T01:19:50.834Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/CXTretar/CXProvincesMapView" target="_blank" rel="noopener">Demo链接</a></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="需要用到的软件-解压密码-xclient-info"><a href="#需要用到的软件-解压密码-xclient-info" class="headerlink" title="需要用到的软件 (解压密码 xclient.info)"></a>需要用到的软件 (解压密码 <strong>xclient.info</strong>)</h5><ul><li><p><a href="https://pan.baidu.com/s/1qSAeNTmj3e8Jfu2klvHnTg" target="_blank" rel="noopener">Sketch</a> </p><p>Sketch 是一款Mac上小巧但功能强大的矢量绘图软件，这是专为设计师而打造的矢量绘图软件，拥有简约的设计，调色板，面板，菜单，窗口，控件和功能强大的矢量绘图和文字工具；包含针对UI设计的操作和交互模式，让你设计图标、移动手机UI、网站UI等更加简单高效。</p></li><li><p><a href="https://pan.baidu.com/s/1FAjdUCrYVniNLksW3aY_8A" target="_blank" rel="noopener">PaintCode</a></p><p>PaintCode 是一款 Mac 上的 iOS 矢量绘图编程软件，无论是程序员还是设计师，PaintCode 能够让你像在PS中画图一样绘制各种UI图形，PaintCode 会自动帮你生成针对 Mac OS X 或 iOS 平台 Objective-C 或 C# 代码，能够节约大量的编程时间，支持将代码直接导入到 Xcode 中或导出为 PSD 文件，支持最新的 iOS  和 iWatch SDK，非常的实用！</p></li></ul><h5 id="地图-svg-文件的获取"><a href="#地图-svg-文件的获取" class="headerlink" title="地图 svg 文件的获取"></a>地图 svg 文件的获取</h5><p>推荐使用 <a href="https://www.highcharts.com.cn/mapdata" target="_blank" rel="noopener">HighChart 地图数据</a>，在这里你可以自由的选择国内的某个省份地图下载相应的 svg 文件，这里选择福建省作为一个例子。</p><p><img src="https://ae01.alicdn.com/kf/H28a1f00a5f004ed1a9abe0ececa43768e.png" alt="image-20191027233307531"></p><h4 id="使用-Sketch-对下载的-svg-文件进行再加工"><a href="#使用-Sketch-对下载的-svg-文件进行再加工" class="headerlink" title="使用 Sketch 对下载的 svg 文件进行再加工"></a>使用 Sketch 对下载的 svg 文件进行再加工</h4><p>由于通过 HighChart 地图数据下载的 svg 文件有一些 logo 文字信息的部分图层是我们开发时不需要的，而且会干扰地图的显示，所以使用 Sketch 去除这些部分。</p><p>使用 Sketch 打开下载的 svg 文件，屏蔽这些无用的信息图层</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191027234921580.png" alt="image-20191027234921580"></p><p>重新导出得新 svg 文件才是我们接下来要用到地图文件</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191027235144789.png" alt="image-20191027235144789"></p><h4 id="使用-PaintCode-根据-svg-文件生成-Objective-C-代码"><a href="#使用-PaintCode-根据-svg-文件生成-Objective-C-代码" class="headerlink" title="使用 PaintCode 根据 svg 文件生成 Objective-C 代码"></a>使用 PaintCode 根据 svg 文件生成 Objective-C 代码</h4><p>通过 PaintCode 打开 svg 文件</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191028000249045.png" alt="image-20191028000419208"></p><p>我们可以看到 PaintCode 已经自动为我们生成了 Objective-C 代码，但是这只是图块的 UIBezierPath 路径代码，我们还需要添加文字和图钉的相应位置，接下来我们通过 PaintCode 添加这些内容。</p><ul><li><h5 id="添加市名"><a href="#添加市名" class="headerlink" title="添加市名"></a>添加市名</h5><p>添加 Text，设置文字，调节文字位置以及字体大小为11，PaintCode 也自动生成了相应的代码。</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191028001128976.png" alt="image-20191028001128976"></p></li><li><h5 id="添加图钉位置"><a href="#添加图钉位置" class="headerlink" title="添加图钉位置"></a>添加图钉位置</h5><p>添加图钉 Rect，调节 Rect 的位置，宽高都设置为20。</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191028001948626.png" alt="image-20191028001948626"></p></li><li><h5 id="导出代码"><a href="#导出代码" class="headerlink" title="导出代码"></a>导出代码</h5><p>按照上面的步骤添加其他的市名和图钉位置，并且导出代码文件。</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191028002543468.png" alt="image-20191028002543468"></p></li></ul><h4 id="整理代码文件"><a href="#整理代码文件" class="headerlink" title="整理代码文件"></a>整理代码文件</h4><p>PaintCode 生成的文件包含了图块，文字，图钉三项内容的绘制代码，我们需要对这三项内容进行抽取和整理，这里以福建省为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">+ (void)drawCanvas2WithFrame: (CGRect)targetFrame resizing: (FujianResizingBehavior)resizing</span><br><span class="line">&#123;</span><br><span class="line">    //// General Declarations</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    </span><br><span class="line">    //// Resize to Target Frame</span><br><span class="line">    CGContextSaveGState(context);</span><br><span class="line">    CGRect resizedFrame = FujianResizingBehaviorApply(resizing, CGRectMake(0, 0, 308, 340), targetFrame);</span><br><span class="line">    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);</span><br><span class="line">    CGContextScaleCTM(context, resizedFrame.size.width / 308, resizedFrame.size.height / 340);</span><br><span class="line">  </span><br><span class="line">UIColor* strokeColor = [UIColor colorWithRed: 0.8 green: 0.8 blue: 0.8 alpha: 1];</span><br><span class="line">    UIColor* fillColor = [UIColor colorWithRed: 0.486 green: 0.71 blue: 0.925 alpha: 1];</span><br><span class="line"></span><br><span class="line">    //// 页面1</span><br><span class="line">    &#123;</span><br><span class="line">        //// chart-(1)</span><br><span class="line">        &#123;</span><br><span class="line">            //// Clipped</span><br><span class="line">            &#123;</span><br><span class="line">                //// Group 编组 5</span><br><span class="line">                &#123;</span><br><span class="line">                    //// Group 6</span><br><span class="line">                    &#123;</span><br><span class="line">                        //// Bezier 形状 2 Drawing</span><br><span class="line">                        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];</span><br><span class="line">                        [bezier2Path moveToPoint: CGPointMake(215.48, 200.9)];</span><br><span class="line">                        [bezier2Path addLineToPoint: CGPointMake(214.85, 200.27)];</span><br><span class="line">                        [bezier2Path addLineToPoint: CGPointMake(215.17, 199.01)];</span><br><span class="line">                        [bezier2Path addLineToPoint: CGPointMake(215.8, 199.32)];</span><br><span class="line">                        [bezier2Path addLineToPoint: CGPointMake(216.43, 198.06)];</span><br><span class="line"></span><br><span class="line">                      ......</span><br><span class="line">                        [bezier2Path closePath];</span><br><span class="line">                        [bezier2Path moveToPoint: </span><br><span class="line">                        [bezier2Path closePath];</span><br><span class="line">                        [fillColor setFill];</span><br><span class="line">                        [bezier2Path fill];</span><br><span class="line">                        [strokeColor setStroke];</span><br><span class="line">                        bezier2Path.lineWidth = 1;</span><br><span class="line">                        bezier2Path.miterLimit = 4;</span><br><span class="line">                        [bezier2Path stroke];</span><br><span class="line">                                             &#125;</span><br><span class="line">                         ......</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                 </span><br><span class="line">                          //// Text Drawing</span><br><span class="line">    CGRect textRect = CGRectMake(128, 71, 39, 26);</span><br><span class="line">    &#123;</span><br><span class="line">        NSString* textContent = @&quot;南平市&quot;;</span><br><span class="line">        NSMutableParagraphStyle* textStyle = [[NSMutableParagraphStyle alloc] init];</span><br><span class="line">        textStyle.alignment = NSTextAlignmentLeft;</span><br><span class="line">        NSDictionary* textFontAttributes = @&#123;NSFontAttributeName: [UIFont systemFontOfSize: 11], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle&#125;;</span><br><span class="line"></span><br><span class="line">        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY) options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;</span><br><span class="line">        CGContextSaveGState(context);</span><br><span class="line">        CGContextClipToRect(context, textRect);</span><br><span class="line">        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (textRect.size.height - textTextHeight) / 2, textRect.size.width, textTextHeight) withAttributes: textFontAttributes];</span><br><span class="line">        CGContextRestoreGState(context);</span><br><span class="line">    &#125;</span><br><span class="line">                         </span><br><span class="line">                         ......</span><br><span class="line">                         //// Rectangle Drawing</span><br><span class="line">    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(135, 56, 20, 20)];</span><br><span class="line">    [UIColor.grayColor setFill];</span><br><span class="line">    [rectanglePath fill];</span><br><span class="line">   ......</span><br><span class="line">        CGContextRestoreGState(context);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h5 id="新建一个-FujianMapPath-文件继承于-ChinaMapPath-类，这个文件用来存放整理分类后的代码"><a href="#新建一个-FujianMapPath-文件继承于-ChinaMapPath-类，这个文件用来存放整理分类后的代码" class="headerlink" title="新建一个 FujianMapPath 文件继承于 ChinaMapPath 类，这个文件用来存放整理分类后的代码"></a>新建一个 FujianMapPath 文件继承于 ChinaMapPath 类，这个文件用来存放整理分类后的代码</h5></li><li><h5 id="图块部分"><a href="#图块部分" class="headerlink" title="图块部分"></a>图块部分</h5><p>我们只需要摘取 <code>UIBezierPath</code> 的路径部分代码即可，也就是每一个 <code>bezierPath</code> 在以下代码之前的路径代码(换个说法就是删除每个<code>bezierPath</code> 的以下代码)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[fillColor setFill];</span><br><span class="line">[bezier2Path fill];</span><br><span class="line">[strokeColor setStroke];</span><br><span class="line">bezier2Path.lineWidth = 1;</span><br><span class="line">bezier2Path.miterLimit = 4;</span><br><span class="line">[bezier2Path stroke];</span><br></pre></td></tr></table></figure><p>整理后的 <code>bezierPath</code> 放在 <code>FujianMapPath</code> 的 <code>pathArray</code> 中。</p></li><li><h5 id="文字部分"><a href="#文字部分" class="headerlink" title="文字部分"></a>文字部分</h5><p>我们只需要摘取每段 <code>textRect</code> 的 frame 即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGRect textRect = CGRectMake(128, 71, 39, 26);</span><br></pre></td></tr></table></figure><p>整理后的 <code>textRect</code> 放在 <code>FujianMapPath</code> 的 <code>textRectArray</code> 中，使用 <code>NSValue</code>存储。文字内容需要另外存储在在 <code>FujianMapPath</code> 的 <code>textArray</code> 中。</p></li><li><h5 id="图钉部分"><a href="#图钉部分" class="headerlink" title="图钉部分"></a>图钉部分</h5><p>我们只需要摘取每段 <code>rectanglePath</code> 的起始点即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(135, 56, 20, 20)];</span><br><span class="line">=&gt;  CGPointMake(135, 56)</span><br></pre></td></tr></table></figure><p>整理后的 <code>point</code> 放在 <code>FujianMapPath</code> 的 <code>pinPointArray</code> 中。</p></li></ol><p><strong><em>需要注意的是，我们自行绘制的文字部分和图块部分的市区顺序一般是不一致的，所以我们要根据图块顺序调换 textArray、textRectArray 和  pinPointArray 中市区的顺序</em></strong></p><h4 id="使用-CXProvincesMapView-展示我们获取的代码数据"><a href="#使用-CXProvincesMapView-展示我们获取的代码数据" class="headerlink" title="使用 CXProvincesMapView 展示我们获取的代码数据"></a>使用 CXProvincesMapView 展示我们获取的代码数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/// 自定义的地图快捷创建方法</span><br><span class="line">/// @param mapPath svg 绘图数据</span><br><span class="line">/// @param mapSize svg 绘图尺寸，即 svg 文件中图层的宽高</span><br><span class="line">/// @param frame   视图控件的frame</span><br><span class="line">- (instancetype)initWithMapPath:(ChinaMapPath *)mapPath andMapSize:(CGSize)mapSize andFrame:(CGRect)frame;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.view.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    // 福建省市数据</span><br><span class="line">    FujianMapPath *mapPath = [[FujianMapPath alloc] init];</span><br><span class="line">    self.chinaMapView = [[CXProvincesMapView alloc]initWithMapPath:mapPath andMapSize:CGSizeMake(308, 340) andFrame:CGRectMake(0, 0, self.view.bounds.size.width, 400)];</span><br><span class="line">    _chinaMapView.backgroundColor = [UIColor colorWithRed:230/255.0 green:1.0 blue:1.0 alpha:1.0];</span><br><span class="line">    _chinaMapView.maximumZoomScale = 5.0;</span><br><span class="line">    _chinaMapView.center = self.view.center;</span><br><span class="line">    _chinaMapView.delegate = self;</span><br><span class="line">    //    _chinaMapView.pinAnimation = NO;</span><br><span class="line">    // 直接设置图片</span><br><span class="line">    //    _chinaMapView.pinImage = [UIImage imageNamed:@&quot;pin&quot;];</span><br><span class="line">    // 添加按钮点击</span><br><span class="line">    UIButton *pinButton = [[UIButton alloc]initWithFrame:_chinaMapView.pinView.bounds];</span><br><span class="line">    [pinButton setImage:[UIImage imageNamed:@&quot;pin&quot;] forState:UIControlStateNormal];</span><br><span class="line">    [pinButton addTarget:self action:@selector(pinTest) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [_chinaMapView.pinView addSubview:pinButton];</span><br><span class="line">    [self.view addSubview:_chinaMapView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2019/10/27/使用-PaintCode-绘制自定义的省份地图控件/image-20191028011542388.png" alt="image-20191028011542388"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上步骤看起来繁琐，实际上操作起来并不是很复杂，主要的代码部分 PaintCode 已经为我们生成好了，可以在有 svg 图片的前提下生成任意的地图区域控件，<code>CXProvincesMapView</code> 中国省份地图区域的控件也是这样子生成的。假如你不需要文字或者图钉部分，你可以不用另外绘制文字或者图钉，相对应的数组传入空值就行了。</p><p>完结散花(<em>^▽^</em>)，希望这篇教程对你有帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/CXTretar/CXProvincesMapView&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; clas
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自定义NSURLProtocol实现WebView缓存以及科学上网</title>
    <link href="http://yoursite.com/2018/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89NSURLProtocol%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98%E4%BB%A5%E5%8F%8A%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://yoursite.com/2018/07/20/自定义NSURLProtocol实现网页缓存以及科学上网/</id>
    <published>2018-07-20T02:31:08.000Z</published>
    <updated>2019-09-14T15:04:52.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NSURLProtocol是什么？"><a href="#NSURLProtocol是什么？" class="headerlink" title="NSURLProtocol是什么？"></a>NSURLProtocol是什么？</h4><p>NSURLProtocol是 iOS里面的<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html" target="_blank" rel="noopener">URL Loading System</a>的一部分，它是一个抽象类，不能去实例化它，只能子类化NSURLProtocol，然后在使用的时候注册子类。</p><p><img src="/2018/07/20/自定义NSURLProtocol实现网页缓存以及科学上网/NSURLProtocol.png" alt="NSURLProtocol"></p><h4 id="NSURLProtocol能做什么？"><a href="#NSURLProtocol能做什么？" class="headerlink" title="NSURLProtocol能做什么？"></a>NSURLProtocol能做什么？</h4><p>在每一个 <code>HTTP</code> 请求开始时，<code>URL Loading System</code> 会创建一个合适的 <code>NSURLProtocol</code> 对象处理对应的 URL 请求，而我们需要做的就是写一个继承自 <code>NSURLProtocol</code> 的类，并通过 <code>- registerClass:</code> 方法注册我们的协议类，然后 <code>URL Loading System</code> 就会在请求发出时使用我们创建的 <code>NSURLProtocol</code> 对象对该请求进行处理。</p><p>这样，我们就可以使用 <code>NSURLProtocol</code> 来处理所有的网络请求，实现以下一些功能：</p><ul><li>可以拦截 UIWebView 的网络请求。</li><li>重定向网络请求（可以解决 DNS 域名劫持问题）</li><li>缓存网页内容</li><li>自定义 Response （过滤敏感信息）</li><li>全局网络请求设置</li></ul><p>苹果官方文档中的 <a href="https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/CustomHTTPProtocol.zip" target="_blank" rel="noopener">CustomHTTPProtocol</a> 对自定义 <code>NSURLProtocol</code> 有了一些具体的介绍，你可以点击<a href="https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/CustomHTTPProtocol.zip" target="_blank" rel="noopener">这里</a>下载源代码。</p><p>基于官方的 Demo，我们来对 <code>NSURLProtocol</code> 做进一步的处理，使其能够对我们请求的网页内容缓存，甚至可以通过连接代理服务器来科学上网，需要提醒的是，这里的科学上网只能够在注册该 <code>NSURLProtocol</code> 的条件下实现，也就是说是 App 内部的网页可以通过代理服务器请求打开。</p><p><a href="https://github.com/CXTretar/CXProxyURLProtocol" target="_blank" rel="noopener">项目地址</a> </p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>在需要开启代理的时候注册 <code>CXProxyURLProtocol</code> 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CXProxyProtocolManager registerProxyURLProtocol];</span><br></pre></td></tr></table></figure><ul><li>在需要关闭代理的时候注销 <code>CXProxyURLProtocol</code> 。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CXProxyProtocolManager unregisterProxyURLProtocol];</span><br></pre></td></tr></table></figure><ul><li>设置拦截的请求服务类型或者代理服务器 ip 地址和端口号。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> CXProxyURLProtocol 可支持的URLSchemes</span><br><span class="line"></span><br><span class="line"> @return URLSchemes</span><br><span class="line"> */</span><br><span class="line">+ (NSSet *)supportedSchemes;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 设置 CXProxyURLProtocol 可支持的URLSchemes, 默认为 [http,https]</span><br><span class="line"></span><br><span class="line"> @param supportedSchemes URLSchemes like: http https</span><br><span class="line"> */</span><br><span class="line">+ (void)setSupportedSchemes:(NSSet *)supportedSchemes;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 设置代理服务器ip地址以及端口号 http/https 连接方式</span><br><span class="line"> </span><br><span class="line"> @param HTTPProxyHost ip地址</span><br><span class="line"> @param HTTPProxyPort 端口号</span><br><span class="line"> */</span><br><span class="line">+ (void)setHTTPProxyHost:(NSString *)HTTPProxyHost andHTTPProxyPort:(NSNumber *)HTTPProxyPort;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;NSURLProtocol是什么？&quot;&gt;&lt;a href=&quot;#NSURLProtocol是什么？&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol是什么？&quot;&gt;&lt;/a&gt;NSURLProtocol是什么？&lt;/h4&gt;&lt;p&gt;NSURLProto
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS组件化-提交组件代码到cocoapods作为框架</title>
    <link href="http://yoursite.com/2018/06/28/iOS%E7%BB%84%E4%BB%B6%E5%8C%96-%E6%8F%90%E4%BA%A4%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%B0cocoapods%E4%BD%9C%E4%B8%BA%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/06/28/iOS组件化-提交组件代码到cocoapods作为框架使用/</id>
    <published>2018-06-28T02:28:47.000Z</published>
    <updated>2018-07-20T05:39:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>使用CocoaPods非常高效地将一些第三方类库导入到我们的项目中，给我们的开发带来了极大的便利，作为一个iOS开发者，大家肯定有自己封装的一些小组件，假如能让自己封装的组件支持pod集成，就能提供给其他开发者使用，岂不美哉。接下来将用一个Demo来演示组件化操作流程以及注意事项。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="1-上传项目源码"><a href="#1-上传项目源码" class="headerlink" title="1.上传项目源码"></a>1.上传项目源码</h3><p>在github上创建仓库的流程我就不累述了，首先把项目源码上传到github仓库再clone到本地，如果项目本来就在github的仓库中，直接clone到本地即可，这里以CXDatePickerView为例，<a href="https://github.com/CXTretar/CXDatePickerView" target="_blank" rel="noopener">Demo项目地址</a>。</p><h3 id="2-创建项目的podspec文件"><a href="#2-创建项目的podspec文件" class="headerlink" title="2.创建项目的podspec文件"></a>2.创建项目的podspec文件</h3><p>用终端命令cd打开本地项目文件夹并执行如下命令:<br><code>$ pod spec create CXDatePickerView</code><br>这时候文件夹中就生成一个CXDatePickerView.podspec文件，可以直接用xcode打开。<br>终端命令:<br><code>open -a Xcode CXDatePickerView.podspec</code><br>刚生成的文件有很多不必要的注释，可以删除，需要保留的配置字段，可以查看<a href="http://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="noopener">http://guides.cocoapods.org/syntax/podspec.html</a>。<br>Demo中保留了以下字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">  s.name         = &quot;CXDatePickerView&quot;   //  名称</span><br><span class="line">  s.version      = &quot;0.1.1&quot;              //  版本号</span><br><span class="line">  s.summary      = &quot;CXDatePickerView&quot;   //  简要说明</span><br><span class="line"></span><br><span class="line">  s.description  = &lt;&lt;-DESC</span><br><span class="line">                   This is a custom date picker view that provides a number of modifiable UI interfaces.</span><br><span class="line">                   DESC                 //  功能描述</span><br><span class="line"></span><br><span class="line">  s.homepage     = &quot;https://github.com/CXTretar/CXDatePickerView&quot; //项目主页</span><br><span class="line">  s.license      = &quot;MIT&quot;                //  许可证</span><br><span class="line"></span><br><span class="line">  s.author       = &#123; &quot;CXTretar&quot; =&gt; &quot;misscxuan@163.com&quot; &#125; //  所有者</span><br><span class="line"></span><br><span class="line">  s.platform     = :ios, &quot;8.0&quot;          //  系统版本</span><br><span class="line"></span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/CXTretar/CXDatePickerView.git&quot;, :tag =&gt; s.version.to_s &#125; //  项目源地址</span><br><span class="line"></span><br><span class="line">  s.source_files  = &quot;CXDatePickerView/CXDatePickerView/*.&#123;h,m&#125;&quot; // 关联的源文件</span><br><span class="line"></span><br><span class="line">  s.requires_arc = true                 // 是否支持ARC</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>在这些字段中 <code>s.platform</code> 和 <code>s.source_files</code> 需要特别注意。<br><code>s.platform</code> 系统版本不要写的太低，不然上传到cocoapods时会因为不支持MRC而出现一些不必要的警告，在使用时也会出现多余的警告，建议填写”8.0”。<br><code>s.source_files</code> 是你要上传的组件文件夹地址，一定要是正确的路径，不然在上传到cocoapods时会出现<code>[iOS] file patterns: The &#39;source_files&#39; pattern did not match any file.</code>错误。填写的路径格式为 <code>项目文件夹name/组件文件夹name/*.{h,m}</code>，假如组件文件夹中还有其他文件夹，则为 <code>项目文件夹name/组件文件夹name/**/*.{h,m}</code>。</p><h3 id="3-验证podspec文件"><a href="#3-验证podspec文件" class="headerlink" title="3.验证podspec文件"></a>3.验证podspec文件</h3><p>编辑完podspec文件后需要验证该文件是否可用，podspec文件不允许有任何的Warning或者Error<br>终端命令:<br><code>$ pod lib lint</code><br>如果出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; CXDatePickerView (0.0.1)</span><br><span class="line"></span><br><span class="line">CXDatePickerView passed validation.</span><br></pre></td></tr></table></figure></p><p>则说明验证通过，否则，就需要根据提示修改podspec文件再次验证直到验证通过。<br>因为Xcode允许警告存在，所以可以通过命令屏蔽警告<br><code>$ pod lib lint --allow-warnings</code><br>如果出现Error但是提示信息不足，可以添加–verbose 以获取更多错误信息<br><code>$ pod lib lint --verbose</code></p><h3 id="4-上传podspec文件"><a href="#4-上传podspec文件" class="headerlink" title="4.上传podspec文件"></a>4.上传podspec文件</h3><p>podspec文件中需要指定的tag，完成上述操作后给项目打tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -m&quot;release CXDatePickerView with podspec&quot; &quot;0.0.1&quot;</span><br><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure></p><p>接下来就需要将podspec文件上传至CocoaPod官方库，这里需要用到 pod trunk 账号，相信很多人都还没有注册过。这里简要说明一下注册流程：</p><h5 id="①-终端注册trunk账号"><a href="#①-终端注册trunk账号" class="headerlink" title="①.终端注册trunk账号"></a>①.终端注册trunk账号</h5><p><code>$ pod trunk register &#39;邮箱&#39; &#39;用户名&#39; --description=&#39;电脑描述&#39;</code><br>例如<br><code>$ pod trunk register &#39;misscxuan@163.com&#39; &#39;CXTretar&#39; --description=&#39;macbook pro&#39;</code><br>注册成功的话会回复<br><code>[!] Please verify the session by clicking the link in the verification email that has been sent to misscxuan@163.com</code></p><h5 id="②-查收邮件"><a href="#②-查收邮件" class="headerlink" title="②.查收邮件"></a>②.查收邮件</h5><p>如果是QQ邮箱，可能会被放到“垃圾箱”中，并不一定是“收件箱”。<br>点击邮件中的链接：<br><code>https://trunk.cocoapods.org/sessions/verify/xxxx</code></p><h5 id="③-接下来查看个人信息"><a href="#③-接下来查看个人信息" class="headerlink" title="③.接下来查看个人信息"></a>③.接下来查看个人信息</h5><p><code>$ pod trunk me</code><br>结果信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- Name:     CXTretar</span><br><span class="line">- Email:    misscxuan@163.com</span><br><span class="line">- Since:    June 27th, 01:08</span><br><span class="line">- Pods:</span><br><span class="line">  - CXDatePickerView</span><br><span class="line">- Sessions:</span><br><span class="line">  - June 27th, 01:08 - November 3rd, 01:09. IP: xxx.xxx.xxx.xxx</span><br><span class="line">  Description: macbook pro</span><br></pre></td></tr></table></figure><p>到这一步就注册成功了，假如遇到 <code>NoMethodError - undefined method &#39;last&#39; for #&lt;Netrc::Entry:0x007fc59c246378&gt;</code> 这样的问题需要尝试更新gem源或者pod：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gem update --system</span><br><span class="line">$ sudo gem install cocoapods</span><br><span class="line">$ sudo gem install cocospods-trunk</span><br></pre></td></tr></table></figure></p><p>如果遇到 <code>[!] Authentication token is invalid or unverified. Either verify it with the email that was sent or register a new session.</code> 请重新再注册一次。<br>pod trunk 设置完毕后执行终端命令:<br><code>$ pod trunk push CXDatePickerView.podspec</code><br>发布时可以允许警告：<br><code>$ pod trunk push --allow-warnings CXDatePickerView.podspec</code><br>这个过程可能会比较耗时，需要耐心等待，假如有VPN工具的话，建议开启VPN后再进行这一步。<br>成功时会显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Updating spec repo `master`</span><br><span class="line">Validating podspec</span><br><span class="line"> -&gt; CXDatePickerView (0.0.1)</span><br><span class="line"> </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 🎉  Congrats</span><br><span class="line"></span><br><span class="line"> 🚀  CXDatePickerView (0.0.1) successfully published</span><br><span class="line"> 📅  June 28th, 01:22</span><br><span class="line"> 🌎  https://cocoapods.org/pods/CXDatePickerView</span><br><span class="line"> 👍  Tell your friends!</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="5-搜索组件框架"><a href="#5-搜索组件框架" class="headerlink" title="5.搜索组件框架"></a>5.搜索组件框架</h3><p>此时你的组件库已经上传至cocoapods官方库中，可以这样子搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pod setup </span><br><span class="line">$ pod repo update</span><br><span class="line">$ pod search CXDatePickerView</span><br></pre></td></tr></table></figure></p><p>假如搜索结果为 <code>[!] Unable to find a pod with name, author, summary, or description matching &#39;xxxx&#39;</code>，说明你的pod搜索库还没有更新，解决方法是通过Finder前往资源库去删除缓存中的search_index.json，路径为<code>~/Library/Caches/CocoaPods</code>，删除search_index.json，再重新调用 <code>pod search CXDatePickerView</code> 代码就能够搜索到你刚上传的组件库。</p><p>完结散花(<em>^▽^</em>)，希望这篇教程对你有帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;使用CocoaPods非常高效地将一些第三方类库导入到我们的项目中，给我们的开发带来了极大的便利，作为一个iOS开发者，大家肯定有自己封装的
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/21/hello-world/"/>
    <id>http://yoursite.com/2018/03/21/hello-world/</id>
    <published>2018-03-21T02:21:47.000Z</published>
    <updated>2018-06-28T08:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了点时间搞了自己的博客，感觉么么哒😘，希望能多上传点文章  ヾ(◍°∇°◍)ﾉﾞ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;花了点时间搞了自己的博客，感觉么么哒😘，希望能多上传点文章  ヾ(◍°∇°◍)ﾉﾞ。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活感想" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
